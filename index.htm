<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>Wheel Of List</title>
  <meta name="description" content="Free and easy to use spinner. Enter names, spin the wheel to pick a random winner. Customize the look and feel, save and share your wheel.">
  <meta name="viewport" content="initial-scale=1, maximum-scale=5, minimum-scale=1, width=device-width">
  <meta name="theme-color" content="#3369e8">
  <!-- Bootstrap 5 CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <!-- Google Fonts -->
  <link href="https://fonts.googleapis.com/css?family=Quicksand" rel="stylesheet">
  <script async src="https://www.googletagmanager.com/gtag/js?id=G-XV614N2RLR"></script>
  <script>
    window.dataLayer = window.dataLayer || [];
  </script>
  <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-6858130394830057" crossorigin="anonymous"></script>
  <style>
    html, body {
      height: 100%;
      margin: 0;
      font-family: 'Quicksand', sans-serif;
      scroll-behavior: smooth;
      transition: background-color 0.3s, color 0.3s;
    }
    #wheel-container {
      position: relative;
      width: 100%;
      height: calc(100vh - 150px);
      display: flex;
      justify-content: center;
      align-items: center;
      background: linear-gradient(135deg, #f8f9fa, #e9ecef);
      border-radius: 20px;
      padding: 20px;
      box-shadow: 0 8px 16px rgba(0,0,0,0.2);
    }
    #wheelCanvas {
      cursor: pointer;
      background-color: #fff;
      border-radius: 50%;
      box-shadow: 0 4px 12px rgba(0,0,0,0.3);
    }
    #pointer {
      position: absolute;
      left: 50%;
      transform: translateX(-50%);
      width: 50px;
      height: 40px;
      clip-path: polygon(50% 0%, 0% 100%, 100% 100%);
      background: #1E90FF;
      filter: drop-shadow(0 4px 6px rgba(0,0,0,0.4));
      z-index: 10;
      transition: transform 0.2s ease;
    }
    #pointer:hover {
      transform: translateX(-50%) scale(1.1);
    }
    #overlayButton {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      font-size: 24px;
      font-weight: bold;
      z-index: 20;
      display: none;
      animation: bounce 1.5s infinite;
    }
    #winnerOverlay {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      padding: 15px 30px;
      font-size: 24px;
      font-weight: bold;
      color: white;
      background: linear-gradient(45deg, #1E90FF, #00BFFF);
      border-radius: 10px;
      box-shadow: 0 4px 8px rgba(0,0,0,0.2);
      z-index: 20;
      display: none;
      animation: bounce 1.5s infinite;
    }
    @keyframes bounce {
      0%, 100% { transform: translate(-50%, -50%) translateY(0); }
      50% { transform: translate(-50%, -50%) translateY(-10px); }
    }
    .navbar-custom {
      background: linear-gradient(90deg, #1E90FF, #00BFFF);
    }
    .navbar-custom .navbar-brand, .navbar-custom .nav-link {
      color: #fff !important;
    }
    .btn-primary {
      background: linear-gradient(45deg, #1E90FF, #00BFFF);
      border: none;
      box-shadow: 0 4px 8px rgba(0,0,0,0.2);
      transition: all 0.3s ease;
    }
    .btn-primary:hover {
      transform: scale(1.05);
    }
    .btn-primary.loading {
      opacity: 0.7;
      pointer-events: none;
    }
    .dark-theme {
      background-color: #1A1A1A;
      color: #fff;
    }
    .dark-theme #wheel-container {
      background: linear-gradient(135deg, #333, #444);
    }
    .dark-theme .navbar-custom {
      background: linear-gradient(90deg, #2c3e50, #34495e);
    }
    .dark-theme .btn-primary {
      background: linear-gradient(45deg, #2c3e50, #3498db);
    }
    @media (max-width: 768px) {
      #overlayButton, #winnerOverlay { font-size: 18px; }
      #namesInput { font-size: 14px; }
    }
    #scoreboard .list-group-item {
      display: flex;
      align-items: center;
      background: linear-gradient(90deg, #e9ecef, #f8f9fa);
      border: none;
      border-radius: 10px;
      margin-bottom: 2px;
      padding: 2px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
      transition: transform 0.2s ease;
    }
    #scoreboard .list-group-item:hover {
      transform: scale(1.02);
    }
    #scoreboard .order-number {
      width: 30px;
      height: 30px;
      background: linear-gradient(45deg, #1E90FF, #00BFFF);
      color: white;
      border-radius: 50%;
      display: flex;
      justify-content: center;
      align-items: center;
      font-weight: bold;
      margin-right: 10px;
    }
  </style>
</head>
<body>
  <nav class="navbar navbar-expand-lg navbar-light navbar-custom">
    <div class="container-fluid">
      <a class="navbar-brand" href="#">Wheel Of List</a>
      <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarContent">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="navbarContent">
        <ul class="navbar-nav ms-auto">
          <li class="nav-item"><a class="nav-link" href="#about">About</a></li>
          <li class="nav-item"><a class="nav-link" href="mailto:dionisiosoftware@gmail.com?subject=Wheel%20of%20List">Contact</a></li>
        </ul>
      </div>
    </div>
  </nav>

  <div class="container-fluid">
    <div class="row">
      <div class="col-md-8">
        <div id="wheel-container">
          <div id="overlayButton" class="btn btn-primary btn-lg">Spin Now!</div>
          <div id="winnerOverlay"></div>
          <div id="pointer"></div>
          <canvas id="wheelCanvas"></canvas>
        </div>
      </div>
      <div class="col-md-4">
        <div class="p-3">
          <div class="mb-3">
            <h5>Scoreboard</h5>
            <ul id="scoreboard" class="list-group"></ul>
          </div>
          <textarea id="namesInput" class="form-control" rows="10" placeholder="Enter names, one per line"></textarea>
          <button id="updateNames" class="btn btn-primary btn-block mt-2">Update Wheel</button>
          <button id="shareResult" class="btn btn-success btn-block mt-2">Share Result</button>
          <select id="themeSelect" class="form-select mt-2">
            <option value="light">Light Theme</option>
            <option value="dark">Dark Theme</option>
          </select>
          <div id="adsBanner" class="mt-3 text-center">
            <div style="border: 1px solid #ccc; padding: 20px;">Enjoy for free!!!</div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <section id="about" style="padding: 60px 20px;">
    <div class="container">
      <h2>About the Spinner</h2>
      <p>Welcome to Wheel Of List â€“ your interactive tool for random name selection! This spinner was designed to be simple, fun, and effective for classroom activities, raffles, or any event where you need to choose a random winner.</p>
      <p><strong>How to Use the Spinner:</strong></p>
      <ul>
        <li><strong>Enter Your Names:</strong> On the right-hand side, you'll find a text area where you can enter names, one per line. Once you've added all the names, click the <em>Update Wheel</em> button to load them into the spinner.</li>
        <li><strong>Spin the Wheel:</strong> With the names loaded, simply click anywhere on the spinner. Watch as the wheel spins with exciting sound effects and dynamic animations.</li>
        <li><strong>Random Selection:</strong> As the wheel slows down, a pointer at the bottom of the spinner will indicate the winning segment. Once the wheel stops, the name aligned with the pointer will be selected as the winner.</li>
        <li><strong>Scoreboard:</strong> Each time a name is selected, it appears on the scoreboard on the right. In cases where multiple names are present, the winning name is removed from the wheel, and the process can be repeated until all names are selected.</li>
      </ul>
      <p>This tool is perfect for spontaneous decision-making or adding a playful twist to your events. We hope you enjoy using the spinner and that it brings a fun and interactive element to your activities!</p>
      <p>If you have any questions or feedback, please feel free to contact us. Happy spinning!</p>
    </div>
  </section>

  <section id="who" style="padding: 60px 20px;">
    <div class="container">
      <h2>Who is Wheel of List For?</h2>
      <p>Wheel of List is designed for anyone who needs a simple yet effective tool for making random selections. Whether you're a teacher looking to engage your students, an event organizer needing a fair raffle system, or simply someone who loves interactive tools, this spinner is for you.</p>
      <p><strong>Educators:</strong> Teachers and educators can use Wheel of List to choose students for activities, answer questions, or form teams. Its intuitive interface makes classroom management fun and engaging, while ensuring that every student gets an equal chance.</p>
      <p><strong>Event Planners and Hosts:</strong> If you're organizing a giveaway, raffle, or game during an event, Wheel of List offers a fair and transparent way to select winners. Its random selection process removes any bias, making it a perfect addition to parties, conferences, and other gatherings.</p>
      <p><strong>Business and Team Building:</strong> Use the spinner for icebreaker activities or team-building exercises. It can help generate ideas, assign tasks randomly, or even select employees for rewards, contributing to a more dynamic and inclusive workplace environment.</p>
      <p><strong>Personal Use:</strong> Sometimes, decision-making can be challenging. Whether you're choosing a restaurant, deciding on a movie, or just playing a fun game with friends, Wheel of List offers an entertaining and practical solution.</p>
      <p>The simplicity and customizability of Wheel of List make it a versatile tool suitable for a wide range of applications. Its clear interface and engaging animations ensure that itâ€™s not only functional but also enjoyable to use.</p>
      <p>Explore the possibilities and enjoy the fun, interactive experience that Wheel of List brings to your everyday decision-making or special events!</p>
    </div>
  </section>

  <section id="randomness" style="padding: 60px 20px;">
    <div class="container">
      <h2>The Randomness Behind Wheel of List</h2>
      <p>At Wheel of List, randomness is at the core of our design. Our spinner is built with robust algorithms that ensure every entry has an equal chance of being selected. This means that whether you're using the spinner for classroom activities, raffles, team assignments, or personal decisions, the outcome is completely unbiased and unpredictable.</p>
      <p>We believe that the element of chance adds a sense of excitement and fairness. Every spin is a unique experience where luck plays a significant roleâ€”sometimes favoring one name, and at other times delivering a surprise choice. Itâ€™s all about letting chance take the reins and embracing the unexpected.</p>
      <p>Experience the magic of randomness and see how Wheel of List transforms the simple act of selection into an engaging and dynamic experience. Let luck guide your decisions, and enjoy the thrill of the unpredictable!</p>
    </div>
  </section>

  <section id="curiosities" style="padding: 60px 20px;">
    <div class="container">
      <h2>Fun Facts and Curiosities about Randomness</h2>
      <p>Did you know that randomness has fascinated humans for centuries? From ancient dice games to modern lottery systems, the concept of chance has always been intertwined with our culture. Wheel of List leverages this timeless fascination, transforming every spin into a moment of excitement and wonder.</p>
      <p>Explore quirky trivia about randomness, such as the origins of the spinning wheel and how different cultures have used random selection in decision-making processes. Embrace the playful side of probability with our spinner and discover the unexpected stories behind everyday randomness.</p>
    </div>
  </section>

  <section id="history" style="padding: 60px 20px;">
    <div class="container">
      <h2>The History of Spinners and Random Selection Tools</h2>
      <p>Random selection tools have evolved from simple mechanical devices to sophisticated digital applications. Early versions of spinners were used in board games and as decision-making aids in various cultures.</p>
      <p>Over time, these tools have been refined with the advent of technology. Today, digital spinners like Wheel of List combine classic design with modern algorithms, ensuring fairness and adding a touch of entertainment. Delve into the rich history of these tools and appreciate how far theyâ€™ve come in making our lives more fun and interactive.</p>
    </div>
  </section>

  <section id="customization" style="padding: 60px 20px;">
    <div class="container">
      <h2>Customizing Your Spinner Experience</h2>
      <p>Wheel of List is designed with flexibility in mind. Users can personalize the spinner by entering their own list of names or items, adjusting the look and feel of the wheel, and even setting specific rules for selection.</p>
      <p>Whether you want to assign prizes, select team members, or simply create an engaging game, our tool offers customizable options that cater to your needs. Experiment with different themes and settings to create a spinner that perfectly matches your event or personal style.</p>
    </div>
  </section>

  <section id="science" style="padding: 60px 20px;">
    <div class="container">
      <h2>The Science Behind Random Selection</h2>
      <p>Random selection is not just about luckâ€”itâ€™s rooted in complex mathematical principles and algorithms. At Wheel of List, we use trusted methods to ensure that every spin is fair and unbiased.</p>
      <p>Learn about the role of pseudorandom number generators (PRNGs) and how they simulate true randomness. Understand the science that guarantees each entry has an equal opportunity to win, ensuring that our spinner meets high standards of fairness and reliability.</p>
    </div>
  </section>

  <section id="applications" style="padding: 60px 20px;">
    <div class="container">
      <h2>Real-World Applications of Random Selection Tools</h2>
      <p>Random selection tools like Wheel of List are used in a variety of settings beyond simple games. Educators use them to select students for classroom activities, event organizers rely on them for fair raffles, and businesses utilize them for team-building exercises.</p>
      <p>Explore how different industries incorporate randomness into decision-making processes, adding an element of surprise and impartiality. From academic settings to corporate environments, discover the versatile applications of our spinner in everyday life.</p>
    </div>
  </section>

  <section id="testimonials" style="padding: 60px 20px;">
    <div class="container">
      <h2>User Testimonials and Success Stories</h2>
      <p>Our users love the simplicity and effectiveness of Wheel of List. Teachers report increased classroom engagement, while event organizers appreciate the fairness and excitement it brings to raffles and games.</p>
      <p>Read real-life success stories and testimonials from users who have integrated our spinner into their events, classrooms, and workplaces. Their experiences highlight how a simple tool can create memorable moments and foster a sense of community.</p>
    </div>
  </section>

  <section id="fairplay" style="padding: 60px 20px;">
    <div class="container">
      <h2>Ensuring Fair Play and Transparency</h2>
      <p>Fairness is a top priority at Wheel of List. Our commitment to transparency means that every spin is conducted with integrity, using algorithms that are both robust and verifiable.</p>
      <p>Discover how we maintain trust by continuously testing and refining our random selection process. Our transparent approach ensures that all users can rely on the spinner to deliver unbiased results every time.</p>
    </div>
  </section>

  <section id="future" style="padding: 60px 20px;">
    <div class="container">
      <h2>Future Developments and Exciting Features</h2>
      <p>We are constantly working to improve Wheel of List and expand its capabilities. Upcoming features include enhanced customization options, integration with popular event management tools, and new interactive animations.</p>
      <p>Stay tuned for regular updates as we continue to innovate and bring you a more engaging, efficient, and fun random selection experience. Our roadmap is driven by user feedback and the evolving needs of modern events.</p>
    </div>
  </section>

  <section id="faq" style="padding: 60px 20px;">
    <div class="container">
      <h2>Frequently Asked Questions (FAQ)</h2>
      <p><strong>Q:</strong> Can I use Wheel of List for multiple events?<br>
         <strong>A:</strong> Absolutely! You can easily reset the spinner and load a new list of names for each event or activity.</p>
      <p><strong>Q:</strong> Is the random selection truly unbiased?<br>
         <strong>A:</strong> Yes, our algorithms are designed to ensure every entry has an equal chance of being selected.</p>
      <p><strong>Q:</strong> Can I customize the appearance of the spinner?<br>
         <strong>A:</strong> Yes, Wheel of List offers various customization options to match your eventâ€™s theme or personal preference.</p>
      <p>If you have additional questions, feel free to contact our support team for further assistance.</p>
    </div>
  </section>

  <footer class="bg-light text-center mt-3 p-3">
    <a href="https://dionisio.dev" class="text-decoration-none">Copyright Â© Dionisio Software</a>
  </footer>

  <!-- Bootstrap 5 JS -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    let names = [];
    let originalNames = [];
    let colors = [];
    let angleCurrent = 0;
    let isSpinning = false;
    let spinAngleStart = 0;
    let spinTime = 0;
    let spinTimeTotal = 0;
    let isAnimatingWinner = false;
    let spinOrder = 0;

    const canvas = document.getElementById("wheelCanvas");
    const ctx = canvas.getContext("2d");
    const spinSound = new Audio("audio/spin.mp3");
    const winSound = new Audio("audio/win.mp3");

    function updateOverlay() {
      const overlay = document.getElementById("overlayButton");
      const winnerOverlay = document.getElementById("winnerOverlay");
      overlay.style.display = (names.length >= 2 && !isSpinning && !isAnimatingWinner) ? "block" : "none";
      if (!isAnimatingWinner) winnerOverlay.style.display = "none";
    }

    function initDefaultNames() {
      if (names.length === 0) {
        names = ["Alice", "Bob", "Carol", "Dave", "Eve"];
        originalNames = names.slice();
        colors = generateColors(names.length);
        document.getElementById("namesInput").value = names.join("\n");
      }
    }

    function resizeCanvas() {
      const container = document.getElementById("wheel-container");
      const size = Math.min(container.offsetWidth * 0.9, container.offsetHeight * 0.9);
      canvas.width = size;
      canvas.height = size;
      drawWheel();
      updatePointerPosition();
    }
    window.addEventListener("resize", resizeCanvas);

    function updatePointerPosition() {
      const canvasRect = canvas.getBoundingClientRect();
      const centerY = canvasRect.top + canvas.height / 2;
      const outsideRadius = canvas.width / 2 - 10;
      document.getElementById("pointer").style.top = (centerY + outsideRadius - 40) + "px";
    }

    function generateColors(count) {
      const colorPairs = [];
      for (let i = 0; i < count; i++) {
        const hue = (i * 360 / count);
        colorPairs.push({
          start: `hsl(${hue}, 70%, 50%)`,
          end: `hsl(${hue + 30}, 70%, 70%)`
        });
      }
      return colorPairs;
    }

    function drawWheel() {
      const centerX = canvas.width / 2;
      const centerY = canvas.height / 2;
      const outsideRadius = canvas.width / 2 - 10;
      ctx.clearRect(0, 0, canvas.width, canvas.height);

      if (names.length === 0) {
        ctx.fillStyle = "#ccc";
        ctx.beginPath();
        ctx.arc(centerX, centerY, outsideRadius, 0, 2 * Math.PI);
        ctx.fill();
        ctx.fillStyle = "black";
        ctx.font = "20px 'Quicksand', sans-serif";
        ctx.textAlign = "center";
        ctx.fillText("Enter names and update", centerX, centerY);
        updateOverlay();
        return;
      }

      const innerRadius = 30;
      const textRadius = innerRadius + ((outsideRadius - innerRadius) / 2);
      const arc = Math.PI * 2 / names.length;
      for (let i = 0; i < names.length; i++) {
        const angle = angleCurrent + i * arc;
        const gradient = ctx.createLinearGradient(centerX - outsideRadius, centerY - outsideRadius, centerX + outsideRadius, centerY + outsideRadius);
        gradient.addColorStop(0, colors[i].start);
        gradient.addColorStop(1, colors[i].end);
        ctx.fillStyle = gradient;
        ctx.beginPath();
        ctx.moveTo(centerX, centerY);
        ctx.arc(centerX, centerY, outsideRadius, angle, angle + arc);
        ctx.fill();
        ctx.save();
        ctx.fillStyle = "white";
        const textX = centerX + Math.cos(angle + arc / 2) * textRadius;
        const textY = centerY + Math.sin(angle + arc / 2) * textRadius;
        ctx.translate(textX, textY);
        ctx.rotate(angle + arc / 2);
        ctx.textAlign = "center";
        ctx.textBaseline = "middle";
        ctx.font = `bold ${canvas.width < 768 ? 20 : 40}px 'Quicksand', sans-serif`;
        ctx.fillText(names[i], 0, 0);
        ctx.restore();
      }
      ctx.beginPath();
      ctx.arc(centerX, centerY, 30, 0, 2 * Math.PI);
      ctx.fillStyle = "#ffffff";
      ctx.fill();
      ctx.beginPath();
      ctx.arc(centerX, centerY, outsideRadius + 10, 0, 2 * Math.PI);
      ctx.strokeStyle = "rgba(255, 255, 255, 0.5)";
      ctx.lineWidth = 5;
      ctx.shadowBlur = 20;
      ctx.shadowColor = "rgba(255, 255, 255, 0.8)";
      ctx.stroke();
      ctx.shadowBlur = 0;
      updateOverlay();
    }

    document.getElementById("updateNames").addEventListener("click", () => {
      const btn = document.getElementById("updateNames");
      btn.classList.add("loading");
      setTimeout(() => btn.classList.remove("loading"), 500);
      const inputText = document.getElementById("namesInput").value;
      names = inputText.split("\n").map(n => n.trim()).filter(n => n);
      if (names.length === 0) {
        originalNames = [];
        spinOrder = 0;
        document.getElementById("scoreboard").innerHTML = "";
        drawWheel();
        return;
      }
      originalNames = names.slice();
      colors = generateColors(names.length);
      spinOrder = 0;
      document.getElementById("scoreboard").innerHTML = "";
      angleCurrent = 0;
      drawWheel();
      updatePointerPosition();
    });

    let debounceTimeout;
    document.getElementById("namesInput").addEventListener("input", () => {
      clearTimeout(debounceTimeout);
      debounceTimeout = setTimeout(() => document.getElementById("updateNames").click(), 500);
    });

    function spin() {
      if (isSpinning || isAnimatingWinner || names.length < 2) return; // Impede novo giro durante animaÃ§Ã£o
      document.getElementById("overlayButton").style.display = "none";
      spinAngleStart = Math.random() * 10 + 10;
      spinTime = 0;
      spinTimeTotal = Math.random() * 3000 + 4000;
      isSpinning = true;
      spinSound.loop = true;
      spinSound.play();
      requestAnimationFrame(rotateWheel);
    }

    function rotateWheel() {
      if (!isSpinning) return;
      spinTime += 30;
      if (spinTime >= spinTimeTotal) {
        spinSound.pause();
        spinSound.currentTime = 0;
        stopRotateWheel();
        return;
      }
      const spinAngle = spinAngleStart - easeOut(spinTime, 0, spinAngleStart, spinTimeTotal);
      angleCurrent += (spinAngle * Math.PI / 180);
      drawWheel();
      requestAnimationFrame(rotateWheel);
    }

    function easeOut(t, b, c, d) {
      t /= d;
      return c * (--t * t * t + 1) + b;
    }

    function getWinningIndex() {
      const angleCurrentDeg = (angleCurrent * 180 / Math.PI) % 360;
      const pointerAngle = 90;
      const effectiveAngle = (pointerAngle - angleCurrentDeg + 360) % 360;
      const arc = 360 / names.length;
      return Math.floor(effectiveAngle / arc);
    }

    function stopRotateWheel() {
      isSpinning = false;
      if (names.length === 1) {
        const lastName = names[0];
        addScoreboard(lastName);
        triggerWinnerAnimation(lastName, () => {
          names = [];
          setTimeout(resetGame, 1000);
        });
      } else if (names.length === 2) {
        const index = getWinningIndex();
        const winningName = names[index];
        addScoreboard(winningName);
        triggerWinnerAnimation(winningName, () => {
          names.splice(index, 1);
          addScoreboard(names[0]); // Adiciona o Ãºltimo nome ao placar sem animaÃ§Ã£o
          names = [];
          resetGame();
        });
      } else if (names.length >= 3) {
        const index = getWinningIndex();
        const winningName = names[index];
        addScoreboard(winningName);
        triggerWinnerAnimation(winningName, () => {
          names.splice(index, 1);
          drawWheel();
          updatePointerPosition();
        });
      }
    }

    function addScoreboard(winner) {
      spinOrder++;
      const scoreboardEl = document.getElementById("scoreboard");
      const li = document.createElement("li");
      li.className = "list-group-item";
      li.innerHTML = `<span class="order-number">${spinOrder}</span> ${winner}`;
      scoreboardEl.appendChild(li);
    }

    function triggerWinnerAnimation(winningName, callback) {
      isAnimatingWinner = true;
      const winnerOverlay = document.getElementById("winnerOverlay");
      winnerOverlay.textContent = `${winningName} Wins!`;
      winnerOverlay.style.display = "block";
      winSound.play();

      const centerX = canvas.width / 2;
      const centerY = canvas.height / 2;
      const particles = [];
      for (let i = 0; i < 50; i++) {
        particles.push({
          x: centerX,
          y: centerY,
          angle: Math.random() * 2 * Math.PI,
          speed: Math.random() * 4 + 1,
          radius: Math.random() * 2 + 1,
          alpha: 1
        });
      }
      const duration = 3000;
      const startTime = Date.now();

      function animate() {
        const elapsed = Date.now() - startTime;
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        drawWheel();
        particles.forEach(p => {
          p.x += Math.cos(p.angle) * p.speed;
          p.y += Math.sin(p.angle) * p.speed;
          p.alpha -= 0.02;
          ctx.beginPath();
          ctx.arc(p.x, p.y, p.radius, 0, 2 * Math.PI);
          ctx.fillStyle = `rgba(255,215,0,${Math.max(p.alpha, 0)})`;
          ctx.fill();
        });

        if (elapsed < duration) {
          requestAnimationFrame(animate);
        } else {
          isAnimatingWinner = false;
          winnerOverlay.style.display = "none";
          drawWheel();
          updateOverlay();
          if (callback) callback();
        }
      }
      requestAnimationFrame(animate);
    }

    function resetGame() {
      names = [];
      originalNames = [];
      angleCurrent = 0;
      isSpinning = false;
      spinOrder = 0;
      drawWheel();
      updateOverlay();
    }

    document.getElementById("overlayButton").addEventListener("click", () => {
      if (!isSpinning && !isAnimatingWinner && names.length >= 2) {
        spin();
      }
    });

    canvas.addEventListener("click", () => {
      if (!isSpinning && !isAnimatingWinner && names.length >= 2) {
        spin();
      } else if (!isSpinning && !isAnimatingWinner && names.length === 1) {
        addScoreboard(names[0]);
        triggerWinnerAnimation(names[0], () => {
          names = [];
          resetGame();
        });
      }
    });

    document.getElementById("shareResult").addEventListener("click", () => {
      const result = Array.from(document.querySelectorAll("#scoreboard li")).map(li => li.textContent).join("\n");
      const shareText = `Check out my Wheel of List results!\n${result}`;
      navigator.clipboard.writeText(shareText).then(() => alert("Results copied to clipboard!"));
    });

    document.getElementById("themeSelect").addEventListener("change", (e) => {
      document.body.classList.toggle("dark-theme", e.target.value === "dark");
      drawWheel();
    });

    document.addEventListener("keydown", (e) => {
      if (e.key === "Enter" && !isSpinning && !isAnimatingWinner && names.length >= 2) {
        spin();
      }
    });

    initDefaultNames();
    resizeCanvas();
  </script>
</body>
</html>